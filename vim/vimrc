"https://danielmiessler.com/study/vim/
"Very good tutorial for vim
"PlugInstall -->command to install plugins
""Plugins
call plug#begin('~/.vim/plugged')


" preview for markdown
Plug 'kannokanno/previm'


" cpp enhanced syntax highlighting for c++11/14/17
Plug 'octol/vim-cpp-enhanced-highlight'


" Rainbow for parenthesis
" Plug 'kien/rainbow_parentheses.vim'

"Vim airline provides good status bar for vim
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'


" Install dash to see documentation
Plug 'rizzatti/dash.vim'
"Super searching"
Plug 'kien/ctrlp.vim'

"AutoComplete"
" Plug 'Valloric/YouCompleteMe'

"Syntax check"
Plug 'vim-syntastic/syntastic'
Plug 'nvie/vim-flake8'

"Autoindent"
Plug 'vim-scripts/indentpython.vim'

"async linting
Plug 'w0rp/ale'

"Smart commenter
"https://github.com/preservim/nerdcommenter
Plug 'preservim/nerdcommenter'

"plug in for linting in c++ and c
Plug 'rhysd/vim-clang-format', {'for': ['c', 'cpp']}
"
" Toggle background function
"Plug 'rakr/vim-togglebg'
"

" Gruvbox Community theme.
Plug 'gruvbox-community/gruvbox'

"
"" Integrate fzf with Vim.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'

"NerdTree Plugins
" Plug 'scrooloose/nerdtree'
" Plug 'jistr/vim-nerdtree-tabs'
" Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'ryanoasis/vim-devicons'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'scrooloose/nerdtree-project-plugin'
" Plug 'PhilRunninger/nerdtree-buffer-ops'
" Plug 'PhilRunninger/nerdtree-visual-selection'



"Jedi Plugins
" Here's what it can do:
" Press ctrl + space for the completion options
" <leader>d goes to definition
" <leader>g goes to assignment
" K shows the documentation
" and more

Plug 'davidhalter/jedi'

" Plug 'neoclide/coc.nvim', {'branch': 'release'}
"To install coc-python :CocInstall coc-python"



"" Briefly highlight which text was yanked.
 Plug 'machakann/vim-highlightedyank'
"
"" Show git file changes in the gutter.
 Plug 'mhinz/vim-signify'
"
"" A git wrapper.
Plug 'tpope/vim-fugitive'
"
"" Automatically show Vim's complete menu while typing.
 Plug 'vim-scripts/AutoComplPop'
"
"" Run test suites for various languages.
 Plug 'janko/vim-test'
"
"" Languages and file types.
" Plug 'cakebaker/scss-syntax.vim'
" Plug 'chr4/nginx.vim'
" Plug 'chrisbra/csv.vim'
"Plug 'ekalinin/dockerfile.vim'
" Plug 'elixir-editors/vim-elixir'
" Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'godlygeek/tabular' | Plug 'tpope/vim-markdown'
"Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
"Plug 'jvirtanen/vim-hcl'
"Plug 'lifepillar/pgsql.vim'
"Plug 'othree/html5.vim'
 " Plug 'pangloss/vim-javascript'
" Plug 'PotatoesMaster/i3-vim-syntax'
 Plug 'stephpy/vim-yaml'
" Plug 'tmux-plugins/vim-tmux'
 Plug 'tpope/vim-git'
" Plug 'tpope/vim-liquid'
" Plug 'tpope/vim-rails'
 Plug 'vim-python/python-syntax'
 " Plug 'vim-ruby/vim-ruby'
 Plug 'wgwoods/vim-systemd-syntax'
"
call plug#end()


autocmd vimenter * colorscheme gruvbox


" If you open this file in Vim, it'll be syntax highlighted for you.
" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup message.
set shortmess+=I

" Show line numbers.
set number

" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
"
set ignorecase
set smartcase



set exrc
set smartindent
set scrolloff=10



set noswapfile
set nowritebackup
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch

set showmatch
set matchtime=3
set updatetime=50
set cmdheight=2

" Useful settings
set history=700
set undolevels=700



" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse=r
" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>
".. bind cltr space to i"
imap jj    <ESC>

"Split of the vim pannel"
nnoremap <C-J>  <C-W>J
nnoremap <C-K>  <C-W>K
nnoremap <C-L>  <C-W>L
nnoremap <C-H>  <C-W>H




".. bind <leader> to alt
map <Space> <Leader>

"..set to take curser after last character use $+l"
set ve+=onemore
set tabstop=2
set shiftwidth=2
set expandtab

"Add brackets with closing bracket"
inoremap [ []<Left>
inoremap ( ()<Left>
inoremap < <><Left>
inoremap << <<<Right>
inoremap " ""<Left>
inoremap ' ''<Left>
" For C & C-like languages
inoremap { {}<Left>
inoremap ``` ```<Cr>```<Up>
" For Ruby
inoremap <C-e>def def<Cr>end<Up>


"Cursor setting for different mode
"Mode Settings

""set cursorline
""highlight CursorLine ctermbg=255
" Enable CursorLine
set cursorline

""set cursorcolumn
" Default Colors for CursorLine
" highlight  CursorLine ctermbg=White ctermfg=Green

" Change Color when entering Insert Mode
" autocmd InsertEnter * highlight  CursorLine ctermbg=LightGreen ctermfg=Blue

" Revert Color to default when leaving Insert Mode
" autocmd InsertLeave * highlight  CursorLine ctermbg=White ctermfg=Green




let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[6 q" "SR = REPLACE mode
let &t_EI.="\e[6 q" "EI = NORMAL mode (ELSE)





"Cursor settings:

"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar


  if exists('$TMUX')
    if (has("termguicolors"))
      set termguicolors
    endif
    set background=dark
    colorscheme gruvbox
  endif


"switch syntax highlighting on, when the terminal has colors
" if has('gui_running')
  " set background=dark
  " colorscheme gruvbox
" else
  " set background=dark
  " colorscheme  gruvbox
" endif

"display vertical line after 80 characters "
set colorcolumn=80
highlight ColorColumn ctermbg=lightblue guibg=lightblue

"Spelling cheking on"
"set spell spelllang=en_us
"to set spelling check locally
":setlocal spell
"unset spellcheck
":set nospell


"Tab completion in vim
set wildmode=longest,list,full
set wildmenu


"Linter options from ale
let g:ale_linters = {
      \'*':[],
      \'python':['flake8','pep8'],
      \}
let g:ale_fixers = {
      \'*':['remove_trailing_lines', 'trim_whitespace'],
      \'python':['black', 'isort'],
      \   'csh': ['shell'],
      \   'elixir': ['credo', 'dialyxir', 'dogma', 'elixir-ls'],
      \   'go': ['gofmt', 'golint', 'go vet'],
      \   'hack': ['hack'],
      \   'help': [],
      \   'perl': ['perlcritic'],
      \   'perl6': [],
      \   'rust': ['cargo'],
      \   'spec': [],
      \   'text': [],
      \   'vue': ['eslint', 'vls'],
      \   'zsh': ['shell']
      \}
let g:ale_fix_on_save = 1

"Linter for c++

"https://releases.llvm.org/10.0.0/tools/clang/docs/ClangFormatStyleOptions.html
let g:clang_format#auto_format=1
let g:clang_format#style_options = {"BasedOnStyle" : "Google"}


"Setting for nerdcommenter
"Note: To comment the line use [count] <Space> cc
"Note: To toogle the comment use [count] <Space> ci
" Create default mappings
"let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
"let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = {
      \'c': { 'left': '/**','right': '*/' },
      \'omd': { 'left': '//','right': '' },
      \}

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"++++++++++++++++++++++++++++++++++++++++++"
"NerdTree Plugins install and configuration
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>


" Start NERDTree and put the cursor back in the other window.
"autocmd VimEnter * NERDTree | wincmd p
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"++++++++++++++++++++++++++++++++++++++++++++++++++"
"Coc Conquer of completion configuration"
" To goto defination
"nmap <Leader> gd <Plug>(coc-definition)
"nmap <Leader> gr <Plug>(coc-references)
 " nmap <Leader> gd :call CocAction('jumpDefinition', 'split')<CR>
 " nmap <Leader> gr :call CocAction('jumpReference', 'split')<CR>
 nnoremap <C-p> :GFiles<CR>
"
"
" Display documentation"
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" function! s:show_documentation()
  " if (index(['vim','help'], &filetype) >= 0)
    " execute 'h '.expand('<cword>')
  " else
    " call CocAction('doHover')
  " endif
" endfunction
"
"
" Smart renames"
" nmap <leader>rn <Plug>(coc-rename)

"++++++++++++++++++++++++++"
"vim ariline configuration
let g:airline_section_b = '%{strftime("%c")}'
let g:airline_section_y = 'BN: %{bufnr("%")}'
" let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts=1




"++++++++++++++++"
"Auto completion configuration
" <C-N> next word completion
" <C-P> previous word completion
"+++++++++++++++++"
"Term size in vim
set splitbelow
set termwinsize=10x0

"Enable python3 in vim"
 let g:syntastic_python_python_exec = 'python3'

"Enable pep8"
" au BufNewFile,BufRead *.py
    " \ set tabstop=4
    " \ set softtabstop=4
    " \ set shiftwidth=4
    " \ set textwidth=79
    " \ set expandtab
    " \ set autoindent
    " \ set fileformat=unix

 set encoding=utf-8

 let g:ycm_autoclose_preview_window_after_completion=1
 map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"python with virtualenv support
"
"
" py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
  " project_base_dir = os.environ['VIRTUAL_ENV']
  " activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  " execfile(activate_this, dict(__file__=activate_this))
" EOF

" Switching between dark and light theme
" call togglebg#map("<F5>")



" +++++++++++++++++
" Quicksave commands
noremap <Leader>s :w<CR> " Save file

" Quick quit commands
noremap <Leader>e :q!<CR>  " Quit current windows
noremap<Leader>E :qal<CR>    " Quit all windows"


" Opening terminal short-cut key
noremap <Leader>t :term<CR>



" Easier moving code blocks
vnoremap < <gv  " better indentation
vnoremap > >gv " better indentation



" Settings for ctrlp
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*


" Settings for " Jedi vim
" let g:jedi#usages_command = "<Leader>z"
" let g:jedi#popup_on_dot = 0
" let g:jedi#popup_select_first = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>


" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction
"
 inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
 inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>

" set file types for unknown extensions

" Set the filetype based on the file's extension, overriding any
" 'filetype' that has already been set
au BufRead,BufNewFile *.omd set filetype=omd
au BufRead,BufNewFile *.frc set filetype=omd


" ++++++++++++++++++++++++++++++++++++++++++++++++++
" Activate rainbow parenthesis globally
let g:rainbow_active = 0
" Highlighting of class scope is disabled by default. To enable set
let g:cpp_class_scope_highlight = 1
" Highlighting of member variables is disabled by default. To enable set
let g:cpp_member_variable_highlight = 1
" Highlighting of class names in declarations is disabled by default. To enable set
let g:cpp_class_decl_highlight = 1
" Highlighting of POSIX functions is disabled by default. To enable set
let g:cpp_posix_standard = 1
" There are two ways to highlight template functions. Either
let g:cpp_experimental_simple_template_highlight = 1
" which works in most cases, but can be a little slow on large files. Alternatively set
let g:cpp_experimental_template_highlight = 1
" which is a faster implementation but has some corner cases where it doesn't work.
" Note: C++ template syntax is notoriously difficult to parse, so don't expect this feature to be perfect.
" Highlighting of library concepts is enabled by
let g:cpp_concepts_highlight = 1
" This will highlight the keywords concept and requires as well as all named requirements (like DefaultConstructible) in the standard library.
" Highlighting of user defined functions can be disabled by
let g:cpp_no_function_highlight = 1
" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"


" Previm confiuration
let g:previm_open_cmd = 'open -a Google\ Chrome'
" Realtime preview
let g:previm_enable_realtime = 1
" for normal mode
nmap <Leader>v :PrevimOpen<CR>


"++++++++++++++++++++++++++++++++++"
"fzf vim configuration
"ctrl-c quits the fzf_preview_window
 let g:fzf_preview_window = 'right:50%'
 let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6  }  }

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-h': 'split',
  \ 'ctrl-v': 'vsplit' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

map <C-f> :Files<CR>
map <leader>b :Buffers<CR>
nnoremap <leader>g :Rg<CR>
nnoremap <leader>l :Lines<CR>

let g:fzf_tags_command = 'ctags -R'
" Border color
" let g:fzf_layout = {
      " \'up':'~90%', 'window': {
        " \'width': 0.8,
        " \'height': 0.8,
        " \'yoffset':0.5,
        " \'xoffset': 0.5,
        " \'highlight': 'Todo',
        " \'border': 'sharp' } }
"
let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_COMMAND="rg --files --hidden"


" Customize fzf colors to match your color scheme
" let g:fzf_colors =
" \ { 'fg':      ['fg', 'Normal'],
  " \ 'bg':      ['bg', 'Normal'],
  " \ 'hl':      ['fg', 'Comment'],
  " \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  " \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  " \ 'hl+':     ['fg', 'Statement'],
  " \ 'info':    ['fg', 'PreProc'],
  " \ 'border':  ['fg', 'Ignore'],
  " \ 'prompt':  ['fg', 'Conditional'],
  " \ 'pointer': ['fg', 'Exception'],
  " \ 'marker':  ['fg', 'Keyword'],
  " \ 'spinner': ['fg', 'Label'],
  " \ 'header':  ['fg', 'Comment'] }
"
" Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)
"
"
" Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
"
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
"
" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)"
