"https://danielmiessler.com/study/vim/
"Very good tutorial for vim
""Plugins
call plug#begin('~/.vim/plugged')


"Vim airline provides good status bar for vim
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'



"Install telescope
"Plug 'nvim-telescope/telescope.nvim'


"async linting
Plug 'w0rp/ale'

"Smart commenter
"https://github.com/preservim/nerdcommenter
Plug 'preservim/nerdcommenter'

"plug in for linting in c++ and c
Plug 'rhysd/vim-clang-format', {'for': ['c', 'cpp']}
"
"
"" Atom One Dark / Light theme.
"Plug 'rakr/vim-one'
"
" Gruvbox Community theme.
Plug 'gruvbox-community/gruvbox'

"
"" Integrate fzf with Vim.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

"NerdTree Plugins
Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'ryanoasis/vim-devicons'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'scrooloose/nerdtree-project-plugin'
" Plug 'PhilRunninger/nerdtree-buffer-ops'
" Plug 'PhilRunninger/nerdtree-visual-selection'



"Jedi Plugins
" Here's what it can do:
" Press ctrl + space for the completion options
" <leader>d goes to definition
" <leader>g goes to assignment
" K shows the documentation
" and more

"Plug 'davidhalter/jedi'

"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"To install coc-python :CocInstall coc-python"



"" Better manage Vim sessions.
" Plug 'tpope/vim-obsession'
"
"" Zoom in and out of a specific split pane (similar to tmux).
" Plug 'dhruvasagar/vim-zoom'
"
"" Pass focus events from tmux to Vim (useful for autoread and linting tools).
" Plug 'tmux-plugins/vim-tmux-focus-events'
"
"" Navigate and manipulate files in a tree view.
"Plug 'lambdalisue/fern.vim'
"Plug 'lambdalisue/fern-mapping-mark-children.vim'
"
"" Helpers for moving and manipulating files / directories.
"Plug 'tpope/vim-eunuch'
"
"" Run a diff on 2 directories.
"Plug 'will133/vim-dirdiff'
"
"" Run a diff on 2 blocks of text.
" Plug 'AndrewRadev/linediff.vim'
"
"" Add spelling errors to the quickfix list (vim-ingo-library is a dependency).
"Plug 'inkarkat/vim-ingo-library' | Plug 'inkarkat/vim-SpellCheck'
"
"" Briefly highlight which text was yanked.
 Plug 'machakann/vim-highlightedyank'
"
"" Highlight which character to jump to when using horizontal movement keys.
"Plug 'unblevable/quick-scope'
"
"" Modify * to also work with visual selections.
"Plug 'nelstrom/vim-visual-star-search'
"
"" Automatically clear search highlights after you move your cursor.
"Plug 'haya14busa/is.vim'
"
"" Handle multi-file find and replace.
" Plug 'mhinz/vim-grepper'
"
"" Better display unwanted whitespace.
" Plug 'ntpeters/vim-better-whitespace'
"
"" Toggle comments in various ways.
Plug 'tpope/vim-commentary'
"
"" Automatically set 'shiftwidth' + 'expandtab' (indention) based on file type.
" Plug 'tpope/vim-sleuth'
"
"" A number of useful motions for the quickfix list, pasting and more.
" Plug 'tpope/vim-unimpaired'
"
"" Drastically improve insert mode performance in files with folds.
" Plug 'Konfekt/FastFold'
"
"" Show git file changes in the gutter.
" Plug 'mhinz/vim-signify'
"
"" A git wrapper.
Plug 'tpope/vim-fugitive'
"
"" Dim paragraphs above and below the active paragraph.
" Plug 'junegunn/limelight.vim'
"
"" Distraction free writing by removing UI elements and centering everything.
"Plug 'junegunn/goyo.vim'
"
"" A bunch of useful language related snippets (ultisnips is the engine).
" Plug 'SirVer/ultisnips'
 Plug 'honza/vim-snippets'
"
"" Automatically show Vim's complete menu while typing.
 Plug 'vim-scripts/AutoComplPop'
"
"" Run test suites for various languages.
" Plug 'janko/vim-test'
"
"" Languages and file types.
" Plug 'cakebaker/scss-syntax.vim'
" Plug 'chr4/nginx.vim'
" Plug 'chrisbra/csv.vim'
"Plug 'ekalinin/dockerfile.vim'
" Plug 'elixir-editors/vim-elixir'
" Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'godlygeek/tabular' | Plug 'tpope/vim-markdown'
"Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
"Plug 'jvirtanen/vim-hcl'
"Plug 'lifepillar/pgsql.vim'
"Plug 'othree/html5.vim'
" Plug 'pangloss/vim-javascript'
" Plug 'PotatoesMaster/i3-vim-syntax'
" Plug 'stephpy/vim-yaml'
" Plug 'tmux-plugins/vim-tmux'
" Plug 'tpope/vim-git'
" Plug 'tpope/vim-liquid'
" Plug 'tpope/vim-rails'
" Plug 'vim-python/python-syntax'
" Plug 'vim-ruby/vim-ruby'
" Plug 'wgwoods/vim-systemd-syntax'
"
call plug#end()



"PlugInstall



" If you open this file in Vim, it'll be syntax highlighted for you.
" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup message.
set shortmess+=I

" Show line numbers.
set number

" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
"
set ignorecase
set smartcase



set exrc
set smartindent
set scrolloff=10



set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch

set showmatch
set matchtime=3
set updatetime=50
set cmdheight=2



" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse=r
" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>
".. bind cltr space to i"
imap jj    <ESC>

"Split of the vim pannel"
nnoremap <C-J>  <C-W><C-J>
nnoremap <C-K>  <C-W><C-K>
nnoremap <C-L>  <C-W><C-L>
nnoremap <C-H>  <C-W><C-H>




".. bind <leader> to alt
map <Space> <Leader>

"..set to take curser after last character use $+l"
set ve+=onemore
set tabstop=2
set shiftwidth=2
set expandtab

"Add brackets with closing bracket"
inoremap [ []<Left>
inoremap ( ()<Left>
inoremap < <><Left>
inoremap << <<<Right>
inoremap " ""<Left>
inoremap ' ''<Left>
" For C & C-like languages
inoremap { {}<Left>
inoremap ``` ```<Cr>```<Up>
" For Ruby
inoremap <C-e>def def<Cr>end<Up>


"Cursor setting for different mode
"Mode Settings

""set cursorline
""highlight CursorLine ctermbg=255
" Enable CursorLine
set cursorline

""set cursorcolumn
" Default Colors for CursorLine
highlight  CursorLine ctermbg=White ctermfg=Green

" Change Color when entering Insert Mode
autocmd InsertEnter * highlight  CursorLine ctermbg=LightGreen ctermfg=Blue

" Revert Color to default when leaving Insert Mode
autocmd InsertLeave * highlight  CursorLine ctermbg=White ctermfg=Green




let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[6 q" "SR = REPLACE mode
let &t_EI.="\e[6 q" "EI = NORMAL mode (ELSE)





"Cursor settings:

"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar


  if exists('$TMUX')
   colorscheme morning
  endif

  if (has("termguicolors"))
   set termguicolors
  endif

 " if &t_co > 2 || has("gui_running")
    " syntax on                    " switch syntax highlighting on, when the terminal has colors
 " endif

"display vertical line after 80 characters "
set colorcolumn=80
highlight ColorColumn ctermbg=lightblue guibg=lightblue

"Spelling cheking on"
"set spell spelllang=en_us
"to set spelling check locally
":setlocal spell
"unset spellcheck
":set nospell


"Tab completion in vim
set wildmode=longest,list,full
set wildmenu


"Linter options from ale
let g:ale_linters = {
      \'*':[],
      \'python':['flake8','pep8'],
      \}
let g:ale_fixers = {
      \'*':['remove_trailing_lines', 'trim_whitespace'],
      \'python':['black', 'isort'],
      \   'csh': ['shell'],
      \   'elixir': ['credo', 'dialyxir', 'dogma', 'elixir-ls'],
      \   'go': ['gofmt', 'golint', 'go vet'],
      \   'hack': ['hack'],
      \   'help': [],
      \   'perl': ['perlcritic'],
      \   'perl6': [],
      \   'rust': ['cargo'],
      \   'spec': [],
      \   'text': [],
      \   'vue': ['eslint', 'vls'],
      \   'zsh': ['shell']
      \}
let g:ale_fix_on_save = 1

"Linter for c++

"https://releases.llvm.org/10.0.0/tools/clang/docs/ClangFormatStyleOptions.html
let g:clang_format#auto_format=1
let g:clang_format#style_options = {"BasedOnStyle" : "Google"}


"Setting for nerdcommenter
"Note: To comment the line use [count] <Space> cc
"Note: To toogle the comment use [count] <Space> ci
" Create default mappings
"let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
"let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"++++++++++++++++++++++++++++++++++++++++++"
"NerdTree Plugins install and configuration
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>


" Start NERDTree and put the cursor back in the other window.
"autocmd VimEnter * NERDTree | wincmd p

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"++++++++++++++++++++++++++++++++++++++++++++++++++"
"Coc Conquer of completion configuration"
" To goto defination
" nmap <silent> gd <Plug>(coc-definition)
"
"
" Display documentation"
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" function! s:show_documentation()
  " if (index(['vim','help'], &filetype) >= 0)
    " execute 'h '.expand('<cword>')
  " else
    " call CocAction('doHover')
  " endif
" endfunction
"
"
" Smart renames"
" nmap <leader>rn <Plug>(coc-rename)

"++++++++++++++++++++++++++"
"vim ariline configuration
let g:airline_section_b = '%{strftime("%c")}'
let g:airline_section_y = 'BN: %{bufnr("%")}'
let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts=1
"
"
"
"++++++++++++++++++++++++++++++++++"
"fzf vim configuration
"
let g:fzf_preview_window = 'right:50%'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6  }  }


"++++++++++++++++"
"Auto completion configuration
"imap <Tab> <C-N>
"+++++++++++++++++"
"Term size in vim
set splitbelow
set termwinsize=10x0



